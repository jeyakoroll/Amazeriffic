const main = () => {
  "use strict";
// Variables
let toDos = [
  'Закончить читать эту книгу',
  'Вывести Барбоса на прогулку в парк',
  'Ответить на почту',
  'Подготовится к тринировке в понедельник',
  'Обновить несколько новых задач',
  'Купить продукты'
],
  toDosNew = [
  'Сделать несколько макетов по верстке',
  'Научится писать приложения на React',
  'Выучить азы по NodeJS',
  'Помочь другу с ремонтом'
];

// Function
  // Make all tabs inactive
  // Make the first tab active
  // Clear the main content to redefine it
  // Returns false since we do not follow the link

$('.tabs a span').toArray().forEach((elem) => {
  // Create a click handler for this item
  $(elem).on('click', () => {
    let $elem = $(elem),
        $content = $('<ul>'),
        $input = $('<input>').addClass('input'),
        $button = $('<button type="submit" name="addTask">').
                  addClass('button').
                  text('Добавить');


    $('.tabs span').removeClass('active');
    $elem.addClass('active');
    $('main .content').empty();
    // content for first tab
      if ($elem.parent().is(":nth-child(1)")) {
        $content;
        toDosNew.forEach((todo) => {
          $content.append($('<li>').text(todo));
        });
        $('main .content').append($content);
        // content for second tab
      } else if ($elem.parent().is(":nth-child(2)")) {
        $content;
        toDos.forEach((todo) => {
          $content.append($('<li>').text(todo));
        });
        $('main .content').append($content);
        // content for third tab
      } else if ($elem.parent().is(":nth-child(3)")) {
        $input, $button;

        $button.on('click', () => {
          toDosNew.push($input.val());
          $input.val('');
        });

        $('main .content').append($input, $button);
      }
    return false;
  });
});



$('.tabs a:first-child span').trigger('click');
};
$(document).ready(main);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtYWluID0gKCkgPT4ge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG4vLyBWYXJpYWJsZXNcclxubGV0IHRvRG9zID0gW1xyXG4gICfQl9Cw0LrQvtC90YfQuNGC0Ywg0YfQuNGC0LDRgtGMINGN0YLRgyDQutC90LjQs9GDJyxcclxuICAn0JLRi9Cy0LXRgdGC0Lgg0JHQsNGA0LHQvtGB0LAg0L3QsCDQv9GA0L7Qs9GD0LvQutGDINCyINC/0LDRgNC6JyxcclxuICAn0J7RgtCy0LXRgtC40YLRjCDQvdCwINC/0L7Rh9GC0YMnLFxyXG4gICfQn9C+0LTQs9C+0YLQvtCy0LjRgtGB0Y8g0Log0YLRgNC40L3QuNGA0L7QstC60LUg0LIg0L/QvtC90LXQtNC10LvRjNC90LjQuicsXHJcbiAgJ9Ce0LHQvdC+0LLQuNGC0Ywg0L3QtdGB0LrQvtC70YzQutC+INC90L7QstGL0YUg0LfQsNC00LDRhycsXHJcbiAgJ9Ca0YPQv9C40YLRjCDQv9GA0L7QtNGD0LrRgtGLJ1xyXG5dLFxyXG4gIHRvRG9zTmV3ID0gW1xyXG4gICfQodC00LXQu9Cw0YLRjCDQvdC10YHQutC+0LvRjNC60L4g0LzQsNC60LXRgtC+0LIg0L/QviDQstC10YDRgdGC0LrQtScsXHJcbiAgJ9Cd0LDRg9GH0LjRgtGB0Y8g0L/QuNGB0LDRgtGMINC/0YDQuNC70L7QttC10L3QuNGPINC90LAgUmVhY3QnLFxyXG4gICfQktGL0YPRh9C40YLRjCDQsNC30Ysg0L/QviBOb2RlSlMnLFxyXG4gICfQn9C+0LzQvtGH0Ywg0LTRgNGD0LPRgyDRgSDRgNC10LzQvtC90YLQvtC8J1xyXG5dO1xyXG5cclxuLy8gRnVuY3Rpb25cclxuICAvLyBNYWtlIGFsbCB0YWJzIGluYWN0aXZlXHJcbiAgLy8gTWFrZSB0aGUgZmlyc3QgdGFiIGFjdGl2ZVxyXG4gIC8vIENsZWFyIHRoZSBtYWluIGNvbnRlbnQgdG8gcmVkZWZpbmUgaXRcclxuICAvLyBSZXR1cm5zIGZhbHNlIHNpbmNlIHdlIGRvIG5vdCBmb2xsb3cgdGhlIGxpbmtcclxuXHJcbiQoJy50YWJzIGEgc3BhbicpLnRvQXJyYXkoKS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgLy8gQ3JlYXRlIGEgY2xpY2sgaGFuZGxlciBmb3IgdGhpcyBpdGVtXHJcbiAgJChlbGVtKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBsZXQgJGVsZW0gPSAkKGVsZW0pLFxyXG4gICAgICAgICRjb250ZW50ID0gJCgnPHVsPicpLFxyXG4gICAgICAgICRpbnB1dCA9ICQoJzxpbnB1dD4nKS5hZGRDbGFzcygnaW5wdXQnKSxcclxuICAgICAgICAkYnV0dG9uID0gJCgnPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgbmFtZT1cImFkZFRhc2tcIj4nKS5cclxuICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoJ2J1dHRvbicpLlxyXG4gICAgICAgICAgICAgICAgICB0ZXh0KCfQlNC+0LHQsNCy0LjRgtGMJyk7XHJcblxyXG5cclxuICAgICQoJy50YWJzIHNwYW4nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkZWxlbS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKCdtYWluIC5jb250ZW50JykuZW1wdHkoKTtcclxuICAgIC8vIGNvbnRlbnQgZm9yIGZpcnN0IHRhYlxyXG4gICAgICBpZiAoJGVsZW0ucGFyZW50KCkuaXMoXCI6bnRoLWNoaWxkKDEpXCIpKSB7XHJcbiAgICAgICAgJGNvbnRlbnQ7XHJcbiAgICAgICAgdG9Eb3NOZXcuZm9yRWFjaCgodG9kbykgPT4ge1xyXG4gICAgICAgICAgJGNvbnRlbnQuYXBwZW5kKCQoJzxsaT4nKS50ZXh0KHRvZG8pKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCdtYWluIC5jb250ZW50JykuYXBwZW5kKCRjb250ZW50KTtcclxuICAgICAgICAvLyBjb250ZW50IGZvciBzZWNvbmQgdGFiXHJcbiAgICAgIH0gZWxzZSBpZiAoJGVsZW0ucGFyZW50KCkuaXMoXCI6bnRoLWNoaWxkKDIpXCIpKSB7XHJcbiAgICAgICAgJGNvbnRlbnQ7XHJcbiAgICAgICAgdG9Eb3MuZm9yRWFjaCgodG9kbykgPT4ge1xyXG4gICAgICAgICAgJGNvbnRlbnQuYXBwZW5kKCQoJzxsaT4nKS50ZXh0KHRvZG8pKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCdtYWluIC5jb250ZW50JykuYXBwZW5kKCRjb250ZW50KTtcclxuICAgICAgICAvLyBjb250ZW50IGZvciB0aGlyZCB0YWJcclxuICAgICAgfSBlbHNlIGlmICgkZWxlbS5wYXJlbnQoKS5pcyhcIjpudGgtY2hpbGQoMylcIikpIHtcclxuICAgICAgICAkaW5wdXQsICRidXR0b247XHJcblxyXG4gICAgICAgICRidXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgdG9Eb3NOZXcucHVzaCgkaW5wdXQudmFsKCkpO1xyXG4gICAgICAgICAgJGlucHV0LnZhbCgnJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJ21haW4gLmNvbnRlbnQnKS5hcHBlbmQoJGlucHV0LCAkYnV0dG9uKTtcclxuICAgICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG5cclxuJCgnLnRhYnMgYTpmaXJzdC1jaGlsZCBzcGFuJykudHJpZ2dlcignY2xpY2snKTtcclxufTtcclxuJChkb2N1bWVudCkucmVhZHkobWFpbik7XHJcbiJdfQ==
